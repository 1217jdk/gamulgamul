{
  "paragraphs": [
    {
      "text": "%md # 1. automation&KAMIS API으로 가져온 것 DB에 넣기 전, 전처리\n+ 처음 DB에 넣는 경우,  2021년 09월07일부터 ~ 측정일까지 채워넣어서, DB에 넣기\n+ Null price는 어제 데이터로 처리\n+ Null price 목록 따로 파일로 저장해서 기록하기\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-03T06:14:22+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>1. automation&amp;KAMIS API으로 가져온 것 DB에 넣기 전, 전처리</h1>\n<ul>\n<li>처음 DB에 넣는 경우,  2021년 09월07일부터 ~ 측정일까지 채워넣어서, DB에 넣기</li>\n<li>Null price는 어제 데이터로 처리</li>\n<li>Null price 목록 따로 파일로 저장해서 기록하기</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664253390158_1474014374",
      "id": "paragraph_1664253390158_1474014374",
      "dateCreated": "2022-09-27T04:36:30+0000",
      "dateStarted": "2022-10-03T06:14:22+0000",
      "dateFinished": "2022-10-03T06:14:22+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:58343"
    },
    {
      "text": "%spark.conf\n\nSPARK_HOME  /usr/local/spark\nPYSPARK_PYTHON /usr/bin/python3\nspark.pyspark.python  /usr/bin/python3\n\n# set driver memory to 8g\nspark.driver.memory 8g\n\n# set executor number to be 3\nspark.executor.instances  3\n\n# set executor memory 4g\nspark.executor.memory  2g\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-27T04:36:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664253372491_282134331",
      "id": "paragraph_1664253372491_282134331",
      "dateCreated": "2022-09-27T04:36:12+0000",
      "dateStarted": "2022-09-27T04:36:21+0000",
      "dateFinished": "2022-09-27T04:36:21+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58344"
    },
    {
      "text": "%md\n## [1] 처음 DB에 넣는 데이터인지 확인(전체 goods_id에 대해서 진행)",
      "user": "anonymous",
      "dateUpdated": "2022-10-02T15:49:55+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>[1] 처음 DB에 넣는 데이터인지 확인(전체 goods_id에 대해서 진행)</h2>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664255742584_160044425",
      "id": "paragraph_1664255742584_160044425",
      "dateCreated": "2022-09-27T05:15:42+0000",
      "dateStarted": "2022-10-02T15:49:55+0000",
      "dateFinished": "2022-10-02T15:49:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58345"
    },
    {
      "text": "%md\n### (1) goods_id 현황 파악\n\n- DB에는 있고, API(Naver, kamis)에는 없고\n- DB에는 없고, API(Naver, kamis)에는 있고\n- DB에 있고, API(Naver, kamis)에 있고\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-03T05:55:20+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>(1) goods_id 현황 파악</h3>\n<ul>\n<li>DB에는 있고, API(Naver, kamis)에는 없고</li>\n<li>DB에는 없고, API(Naver, kamis)에는 있고</li>\n<li>DB에 있고, API(Naver, kamis)에 있고</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664257630332_576670613",
      "id": "paragraph_1664257630332_576670613",
      "dateCreated": "2022-09-27T05:47:10+0000",
      "dateStarted": "2022-10-03T05:55:20+0000",
      "dateFinished": "2022-10-03T05:55:20+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58346"
    },
    {
      "text": "%pyspark\n\n# 2HDBP6HA6\n# paragraph_1664257750778_1075879161\n# post : http://3.36.106.26:8081/api/notebook/run/2HDBP6HA6/paragraph_1664257750778_1075879161\n\n\nimport pandas as pd\nfrom pyspark.sql.functions import col\nimport datetime\n\n\n# 1. 날짜 설정\ntoday = datetime.datetime.now().strftime('%Y-%m-%d')\n# today = '2022-10-03'                   # 임시\n\n\n# 2. DB 정보 및 Load\nurl = \"jdbc:mysql://j7d108.p.ssafy.io:3306/gamulgamul_test3?useSSL=false&characterEncoding=UTF-8&useUnicode=true&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul\"\n\n## 2-1 goods id\ngoods_id_sdf = spark.read.format(\"jdbc\")\\\n    .option(\"url\", url) \\\n    .option(\"driver\", \"com.mysql.cj.jdbc.Driver\")\\\n    .option(\"query\", \"select goods_id from goods\") \\\n    .option(\"user\", \"ji\")\\\n    .option(\"password\", mysql_password).load()\n\ngoods_id_pdf = goods_id_sdf.toPandas()\ngoods_id_set = set(goods_id_pdf['goods_id'])\nprint(f'DB 에 goods_id 개수 : {len(goods_id_set)}')\n\n\n\n## 2-2 goods_price\ngoods_price_sdf = spark.read.format(\"jdbc\")\\\n    .option(\"url\", url) \\\n    .option(\"driver\", \"com.mysql.cj.jdbc.Driver\")\\\n    .option(\"query\", \"select goods_id, unit_price, price, research_date, business from goods_price\") \\\n    .option(\"user\", \"ji\")\\\n    .option(\"password\", mysql_password).load()\n    \n## db Data를 pandas로 바꾸기\ngoods_price_mart_sdf = goods_price_sdf.filter( col('business')=='m' )\ngoods_price_mart_pdf = goods_price_mart_sdf.toPandas()\ngoods_price_online_sdf = goods_price_sdf.filter( col('business')=='o' )\ngoods_price_online_pdf = goods_price_online_sdf.toPandas()\n\n\n## 기존 DB에 있는 goods_id들\nDB_goods_id_mart = set(goods_price_mart_pdf['goods_id'].unique())\nDB_goods_id_online = set(goods_price_online_pdf['goods_id'].unique())\nprint(f'DB mart에 goods_id 개수 : {len(DB_goods_id_mart)}')\nprint(f'DB online 에 goods_id 개수 : {len(DB_goods_id_online)}')\n\n\n\n\n# 3. 추가할 csv Load# 2. DB 정보 및 Load\ntp_goods_price_m_pdf = pd.read_csv(f'/api_data/tp_goods_price_m_{today}.csv')\nnong_goods_price_m_pdf = pd.read_csv(f'/api_data/nong_goods_price_m_{today}.csv')\n\ngoods_price_m_pdf = pd.concat([tp_goods_price_m_pdf,nong_goods_price_m_pdf])\ngoods_price_o_pdf = pd.read_csv(f'/api_data/goods_price_o_{today}.csv')\n\nmart_goods_id_set = set(goods_price_m_pdf[goods_price_m_pdf['price'].notnull()]['goods_id'])\nonline_goods_id_set = set(goods_price_o_pdf[goods_price_o_pdf['price'].notnull()]['goods_id'])\nprint(f' api  mart 에 goods_id 개수 : {len(goods_price_m_pdf)}')\nprint(f' api online 에 goods_id 개수 : {len(online_goods_id_set)}')\n\n\n\n# 5.  현재 NULL인 goods_id 찾기\n## 5-1 DB에 없고,  api에도 없는 goods_id\n# no_mart_goods_id   = goods_id_set - mart_goods_id_set\n# no_online_goods_id = goods_id_set - online_goods_id_set\n# print(f'[m] DB에도 없고, 새로 가져온 데이터에도 없는 goods_id 개수 : {len(no_mart_goods_id)}')\n# # print(f'[nong_m] DB에도 없고, 새로 가져온 데이터에도 없는 goods_id 개수 : {len(no_nong_mart_goods_id)}')\n# print(f'[o] DB에도 없고, 새로 가져온 데이터에도 없는 goods_id 개수 : {len(no_online_goods_id)}')\n# print('-'*100)\n\n## 5-2 DB에 있고,  api에는 없는 goods_id\nonlyDB_mart_goods_id   = DB_goods_id_mart - mart_goods_id_set\nonlyDB_online_goods_id = DB_goods_id_online - online_goods_id_set\nprint(f'[m] DB에는 있고, 새로 가져온 데이터에 없는 goods_id 개수 : {len(onlyDB_mart_goods_id)}')\nprint(f'[o] DB에는 있고, 새로 가져온 데이터에 없는 goods_id 개수 : {len(onlyDB_online_goods_id)}')\nprint('-'*100)\n\n# 6. DB에 없고,  api에는 있는 goods_id 찾기\nmart_only_goods_id   = mart_goods_id_set - DB_goods_id_mart\nonline_only_goods_id = online_goods_id_set - DB_goods_id_online\nprint(f'[m] DB에 없고, 새로 가져온 데이터에는 있는 goods_id 개수 : {len(mart_only_goods_id)}')\nprint(f'[o] DB에 없고, 새로 가져온 데이터에는 있는 goods_id 개수 : {len(online_only_goods_id)}')\nprint('-'*100)\n\n\n# 7. DB에 있고,  api에도 있는 goods_id 찾기\nboth_mart_goods_id = mart_goods_id_set.intersection(DB_goods_id_mart)\nboth_online_goods_id = online_goods_id_set.intersection(DB_goods_id_online)\nprint(f'[m] DB에 있고, 새로 가져온 데이터에도 있는 goods_id 개수 : {len(both_mart_goods_id)}')\nprint(f'[o] DB에 있고, 새로 가져온 데이터에도 있는 goods_id 개수 : {len(both_online_goods_id)}')\nprint('-'*100)\n\n\n\n\n# 8. 결과 df 생성\n# DBx_APIx_result_pdf = pd.DataFrame(columns=['research_date', 'business','goods_id_lst'])\nDBo_APIx_result_pdf = pd.DataFrame(columns=['research_date', 'business','goods_id_lst'])\nDBx_APIo_result_pdf = pd.DataFrame(columns=['research_date', 'business','goods_id_lst'])\nDBo_APIo_result_pdf = pd.DataFrame(columns=['research_date', 'business','goods_id_lst'])\n\n\nlengths = [0,1,2]\n\nbusiness = ['m','o']\ngoods_ids = []\n\n# xx=[\n# no_mart_goods_id,  \n# no_online_goods_id\n# ]\n\nox=[\nonlyDB_mart_goods_id, \nonlyDB_online_goods_id\n]\n\nxo=[\nmart_only_goods_id, \nonline_only_goods_id\n]\n\noo=[\nboth_mart_goods_id, \nboth_online_goods_id\n]\n\nfor i in range(2):\n    # DBx_APIx_result_pdf.loc[i] = [today, business[i], sorted(list(xx[i]))]\n    DBo_APIx_result_pdf.loc[i] = [today, business[i], sorted(list(ox[i]))]\n    DBx_APIo_result_pdf.loc[i] = [today, business[i], sorted(list(xo[i]))]\n    DBo_APIo_result_pdf.loc[i] = [today, business[i], sorted(list(oo[i]))]\n\n# DBx_APIx_result_pdf.to_csv(f'/api_data/integrity/{today}_DBx_APIx.csv', header=True, index=False)\nDBo_APIx_result_pdf.to_csv(f'/api_data/integrity/{today}_DBo_APIx.csv', header=True, index=False)\nDBx_APIo_result_pdf.to_csv(f'/api_data/integrity/{today}_DBx_APIo.csv', header=True, index=False)\nDBo_APIo_result_pdf.to_csv(f'/api_data/integrity/{today}_DBo_APIo.csv', header=True, index=False)\n\n# print(DBx_APIx_result_pdf)\nprint(DBo_APIx_result_pdf)\nprint(DBx_APIo_result_pdf)\nprint(DBo_APIo_result_pdf)",
      "user": "anonymous",
      "dateUpdated": "2022-10-06T08:28:45+0000",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "DB 에 goods_id 개수 : 466\nDB mart에 goods_id 개수 : 466\nDB online 에 goods_id 개수 : 466\n api  mart 에 goods_id 개수 : 466\n api online 에 goods_id 개수 : 466\n[m] DB에는 있고, 새로 가져온 데이터에 없는 goods_id 개수 : 56\n[o] DB에는 있고, 새로 가져온 데이터에 없는 goods_id 개수 : 0\n----------------------------------------------------------------------------------------------------\n[m] DB에 없고, 새로 가져온 데이터에는 있는 goods_id 개수 : 0\n[o] DB에 없고, 새로 가져온 데이터에는 있는 goods_id 개수 : 0\n----------------------------------------------------------------------------------------------------\n[m] DB에 있고, 새로 가져온 데이터에도 있는 goods_id 개수 : 410\n[o] DB에 있고, 새로 가져온 데이터에도 있는 goods_id 개수 : 466\n----------------------------------------------------------------------------------------------------\n  research_date business                                       goods_id_lst\n0    2022-10-06        m  [20000, 20001, 20002, 20003, 20004, 20005, 200...\n1    2022-10-06        o                                                 []\n  research_date business goods_id_lst\n0    2022-10-06        m           []\n1    2022-10-06        o           []\n  research_date business                                       goods_id_lst\n0    2022-10-06        m  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...\n1    2022-10-06        o  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://ip-172-26-3-19.ap-northeast-2.compute.internal:4040/jobs/job?id=9037",
              "$$hashKey": "object:58792"
            },
            {
              "jobUrl": "http://ip-172-26-3-19.ap-northeast-2.compute.internal:4040/jobs/job?id=9038",
              "$$hashKey": "object:58793"
            },
            {
              "jobUrl": "http://ip-172-26-3-19.ap-northeast-2.compute.internal:4040/jobs/job?id=9039",
              "$$hashKey": "object:58794"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664257750778_1075879161",
      "id": "paragraph_1664257750778_1075879161",
      "dateCreated": "2022-09-27T05:49:10+0000",
      "dateStarted": "2022-10-06T00:02:49+0000",
      "dateFinished": "2022-10-06T00:02:53+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58347"
    },
    {
      "text": "%md\n## [2] 농산물만 진행하기",
      "user": "anonymous",
      "dateUpdated": "2022-10-03T05:57:18+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>[2] 농산물만 진행하기</h2>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664726188902_1508053802",
      "id": "paragraph_1664726188902_1508053802",
      "dateCreated": "2022-10-02T15:56:28+0000",
      "dateStarted": "2022-10-03T05:57:18+0000",
      "dateFinished": "2022-10-03T05:57:18+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58348"
    },
    {
      "text": "%md\n## [2] DB에 없고, API(Naver, kamis)에 있는 데이터, DB에 넣기\n",
      "user": "anonymous",
      "dateUpdated": "2022-10-03T05:55:55+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>[2] DB에 없고, API(Naver, kamis)에 있는 데이터, DB에 넣기</h2>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664327343346_382700797",
      "id": "paragraph_1664327343346_382700797",
      "dateCreated": "2022-09-28T01:09:03+0000",
      "dateStarted": "2022-10-03T05:55:55+0000",
      "dateFinished": "2022-10-03T05:55:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58349"
    },
    {
      "text": "%md\n### (1) 일데이터 생성 함수 정의",
      "user": "anonymous",
      "dateUpdated": "2022-10-02T15:49:51+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>(1) 일데이터 생성 함수 정의</h3>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664327447829_1206328279",
      "id": "paragraph_1664327447829_1206328279",
      "dateCreated": "2022-09-28T01:10:47+0000",
      "dateStarted": "2022-10-02T15:49:51+0000",
      "dateFinished": "2022-10-02T15:49:51+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58350"
    },
    {
      "text": "%pyspark\n# 함수 정의\n\nimport datetime\nimport numpy as np\nimport pandas as pd\n\n# row 형식으로 된, 일데이터 주기가 아닌 데이터를, 일데이터 형식으로 바꾸기\ndef inserting_date(start_date, end_date, input_df, business): # Pandas DF를 이용\n    print('debug1')\n    \n    #---------------------------------------------------------------------------------------------------------------------------------#\n    #                 1. 초기작업 : 결과 df 생성, 초기값들 설정\n    #---------------------------------------------------------------------------------------------------------------------------------#\n\n    \n    # 초기 설정 값\n    start_goods_id = min((input_df['goods_id']))\n    # print('d1')\n    end_goods_id = max((input_df['goods_id']))\n    # print('d2')\n    cur_goods_id = start_goods_id - 1\n    # print('d3')\n    cur_research_date = start_date\n    # print('debug2')\n    \n    \n    # goods_id, research_date 기준으로 sorting 시키기\n    input_df = input_df.reset_index(drop=True)\n    input_df = input_df.sort_values(['goods_id','research_date'])\n    # 추후에 삭제할 행\n    input_df.loc[len(input_df)] = [end_goods_id+1, 0, 0 ,start_date.strftime(\"%Y-%m-%d\"), business]\n    print('debug3')\n    \n    # result\n    result_df = pd.DataFrame(columns=input_df.columns)\n    inserting_length = 0\n    \n    \n    \n    input_df_length = 0\n    # input_df의 끝까지 가지 않은 경우, 계속하기\n    ## 1. goods_id 가 달라지는 경우, research_date가 일치하면, input_df_length를 1 늘리기\n    while input_df_length < len(input_df): # dummy row까지 쭉 진행,\n    \n        next_goods_id, next_unit_price, next_price, next_research_date, next_business = input_df.loc[input_df_length]   # input_df의 다음(목표) row\n        # inserting_research_date = cur_research_date                                                    # input_df의 현재 row\n    \n        \n        # goods_id가 같은 경우\n        if next_goods_id == cur_goods_id:\n            ## input_df의 next row에 도달한 경우, 도달한 값 넣어주기\n    \n    \n\n            # print('debug 3')\n            ## 현재 inserting 날짜가, next_research_date에 도달하기 전까지 , 계속 row 삽입하기\n            while next_research_date != inserting_research_date.strftime(\"%Y-%m-%d\"):\n                # print(inserting_research_date.strftime(\"%Y-%m-%d\"), '--------------------')\n                result_df.loc[inserting_length] = cur_goods_id, cur_unit_price, cur_price, inserting_research_date.strftime(\"%Y-%m-%d\"),  cur_business\n                \n                \n                cur_research_date = inserting_research_date                        # cur_research_date 업데이트\n                \n\n                inserting_research_date +=  datetime.timedelta(days=1) # inserting할 날짜 늘리기\n                inserting_length += 1   # result_df 길이 추가\n                \n            cur_goods_id = next_goods_id                                       # cur_goods_id 업데이트\n            cur_unit_price = next_unit_price\n            cur_price = next_price                                             # cur_price 업데이트\n            cur_business = next_business                                       # cur_business 업데이트\n            input_df_length += 1\n                \n    \n           \n    \n    \n        # 새로운 goods_id를 넣는 경우, 새로 진행\n        elif next_goods_id != cur_goods_id:\n            print(cur_goods_id)\n            # print(result_df)\n            \n            ## end_date 까지 row 채워주기\n            if cur_goods_id != start_goods_id - 1:  # 처음 시작하는 경우가 아니라면,\n                while end_date + datetime.timedelta(days=1) > inserting_research_date:\n                    result_df.loc[inserting_length] = cur_goods_id, cur_unit_price,cur_price, inserting_research_date.strftime(\"%Y-%m-%d\"),  cur_business\n                    inserting_research_date +=  datetime.timedelta(days=1) # inserting할 날짜 늘리기\n                    inserting_length += 1   # result_df 길이 추가\n            \n            ## input_df의 마지막까지 진행됐다면 while문 break해서 끝내기\n            if input_df_length == len(input_df) - 1:\n                print('here')\n                break\n            \n            ## inserting_research_date 초기화\n            inserting_research_date = start_date\n            \n            ## 만약 첫 row가 start_date일이 아니면, 채워주기\n            inserting_unit_price = next_unit_price\n            inserting_price = next_price  # next_price의 가격을 앞에 채워주기\n            ### 다음 row의 날짜에 도달하기 전까지 계속 추가해 주기\n            while next_research_date != inserting_research_date.strftime(\"%Y-%m-%d\"):\n                result_df.loc[inserting_length] = next_goods_id, next_unit_price, inserting_price, inserting_research_date.strftime(\"%Y-%m-%d\"), next_business\n                # print(inserting_research_date.strftime(\"%Y-%m-%d\"),'=========================================')\n                \n                cur_research_date = inserting_research_date                        # cur_research_date 업데이트\n                \n                \n                inserting_research_date +=  datetime.timedelta(days=1) # inserting할 날짜 늘리기\n                inserting_length += 1   # result_df 길이 추가\n            \n            input_df_length += 1    # input_df 길이 추가\n            cur_goods_id = next_goods_id                                       # cur_goods_id 업데이트\n            cur_unit_price = next_unit_price\n            cur_price = next_price                                             # cur_price 업데이트\n            \n            cur_business = next_business                                       # cur_business 업데이트\n            \n    return result_df\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-09-28T01:11:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1664327459158_357474796",
      "id": "paragraph_1664327459158_357474796",
      "dateCreated": "2022-09-28T01:10:59+0000",
      "dateStarted": "2022-09-28T01:11:22+0000",
      "dateFinished": "2022-09-28T01:11:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58351"
    }
  ],
  "name": "[daily]01_api_file_Null파악_toStorage",
  "id": "2HDBP6HA6",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Data적재/[daily]01_api_file_Null파악_toStorage"
}